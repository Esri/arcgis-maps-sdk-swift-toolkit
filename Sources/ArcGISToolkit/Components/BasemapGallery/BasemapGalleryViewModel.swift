***REMOVED***.

***REMOVED*** Licensed under the Apache License, Version 2.0 (the "License");
***REMOVED*** you may not use this file except in compliance with the License.
***REMOVED*** You may obtain a copy of the License at
***REMOVED*** http:***REMOVED***www.apache.org/licenses/LICENSE-2.0

***REMOVED*** Unless required by applicable law or agreed to in writing, software
***REMOVED*** distributed under the License is distributed on an "AS IS" BASIS,
***REMOVED*** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
***REMOVED*** See the License for the specific language governing permissions and
***REMOVED*** limitations under the License.

import Swift
***REMOVED***
***REMOVED***
import Combine

***REMOVED***/ Manages the state for a `BasemapGallery`.
@MainActor
public class BasemapGalleryViewModel: ObservableObject {
***REMOVED******REMOVED***/ Creates a `BasemapGalleryViewModel`.
***REMOVED******REMOVED***/ - Parameters:
***REMOVED******REMOVED***/   - geoModel: The `GeoModel`.
***REMOVED******REMOVED***/   - portal: The `Portal` to load base maps from.
***REMOVED******REMOVED***/   - basemapGalleryItems: A list of pre-defined base maps to display.
***REMOVED***public init(
***REMOVED******REMOVED***geoModel: GeoModel? = nil,
***REMOVED******REMOVED***portal: Portal? = nil,
***REMOVED******REMOVED***basemapGalleryItems: [BasemapGalleryItem] = []
***REMOVED***) {
***REMOVED******REMOVED***self.geoModel = geoModel
***REMOVED******REMOVED***self.portal = portal
***REMOVED******REMOVED***self.basemapGalleryItems.append(contentsOf: basemapGalleryItems)
***REMOVED******REMOVED***
***REMOVED******REMOVED******REMOVED*** Note that we don't want to store these tasks and cancel them
***REMOVED******REMOVED******REMOVED*** before kicking off another operation becasue both of these
***REMOVED******REMOVED******REMOVED*** operations could have been started elsewhere as well as here.
***REMOVED******REMOVED******REMOVED*** Canceling them here would also cancel those other operations,
***REMOVED******REMOVED******REMOVED*** which we don't want to do.
***REMOVED******REMOVED***Task { await load(geoModel: geoModel) ***REMOVED***
***REMOVED******REMOVED***Task { await fetchBasemaps(from: portal) ***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED******REMOVED***/ The error generated by fetching the `Basemaps` from the `Portal`.
***REMOVED***@Published
***REMOVED***public var fetchBasemapsError: Error? = nil
***REMOVED***
***REMOVED******REMOVED***/ If the `GeoModel` is not loaded when passed to the `BasemapGalleryViewModel`, then
***REMOVED******REMOVED***/ the geoModel will be immediately loaded. The spatial reference of geoModel dictates which
***REMOVED******REMOVED***/ basemaps from the gallery are enabled. When an enabled basemap is selected by the user,
***REMOVED******REMOVED***/ the geoModel will have its basemap replaced with the selected basemap.
***REMOVED***public var geoModel: GeoModel? {
***REMOVED******REMOVED***didSet {
***REMOVED******REMOVED******REMOVED***Task { await load(geoModel: geoModel) ***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED******REMOVED***/ The `Portal` object, if any.  Setting the portal will automatically fetch it's basemaps
***REMOVED******REMOVED***/ and add them to the `basemapGalleryItems` array.
***REMOVED***public var portal: Portal? {
***REMOVED******REMOVED***didSet {
***REMOVED******REMOVED******REMOVED***Task { await fetchBasemaps(from: portal) ***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED******REMOVED***/ The list of basemaps currently visible in the gallery.  It is comprised of items passed into
***REMOVED******REMOVED***/ the `BasemapGalleryItem` constructor and items loaded from the `Portal`.
***REMOVED***@Published
***REMOVED***public var basemapGalleryItems: [BasemapGalleryItem] = []
***REMOVED***
***REMOVED******REMOVED***/ `BasemapGalleryItem` representing the `GeoModel`'s current base map. This may be a
***REMOVED******REMOVED***/ basemap which does not exist in the gallery.
***REMOVED***@Published
***REMOVED***public private(set) var currentBasemapGalleryItem: BasemapGalleryItem? = nil {
***REMOVED******REMOVED***didSet {
***REMOVED******REMOVED******REMOVED***guard let item = currentBasemapGalleryItem else { return ***REMOVED***
***REMOVED******REMOVED******REMOVED***geoModel?.basemap = item.basemap
***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED******REMOVED***/ The error signifying the spatial reference of the GeoModel and that of a potential
***REMOVED******REMOVED***/ current `BasemapGalleryItem` do not match.
***REMOVED***@Published
***REMOVED***public private(set) var spatialReferenceMismatchError: SpatialReferenceMismatchError? = nil
***REMOVED***
***REMOVED******REMOVED***/ This attempts to set `currentBasemapGalleryItem`. `currentBasemapGalleryItem`
***REMOVED******REMOVED***/ will be set if it's spatialReference matches that of the current geoModel.  If the spatialReferences
***REMOVED******REMOVED***/ do not match, `currentBasemapGalleryItem` will be unchanged.
***REMOVED******REMOVED***/ - Parameter basemapGalleryItem: The new, potential, `BasemapGalleryItem`.
***REMOVED***public func updateCurrentBasemapGalleryItem(_ basemapGalleryItem: BasemapGalleryItem) {
***REMOVED******REMOVED***Task {
***REMOVED******REMOVED******REMOVED***try await basemapGalleryItem.updateSpatialReferenceStatus(
***REMOVED******REMOVED******REMOVED******REMOVED***geoModel?.actualSpatialReference
***REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED***await MainActor.run {
***REMOVED******REMOVED******REMOVED******REMOVED***if basemapGalleryItem.spatialReferenceStatus == .match ||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***basemapGalleryItem.spatialReferenceStatus == .unknown {
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***currentBasemapGalleryItem = basemapGalleryItem
***REMOVED******REMOVED******REMOVED***
***REMOVED******REMOVED******REMOVED******REMOVED***else {
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***spatialReferenceMismatchError = SpatialReferenceMismatchError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***basemapSR: basemapGalleryItem.spatialReference,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***geoModelSR: geoModel?.actualSpatialReference
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED***
***REMOVED******REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***

private extension GeoModel {
***REMOVED***var actualSpatialReference: SpatialReference? {
***REMOVED******REMOVED***(self as? ArcGIS.Scene)?.sceneViewTilingScheme == .webMercator ?
***REMOVED******REMOVED***SpatialReference.webMercator :
***REMOVED******REMOVED***spatialReference
***REMOVED***
***REMOVED***

private extension BasemapGalleryViewModel {
***REMOVED***func fetchBasemaps(from portal: Portal?) async {
***REMOVED******REMOVED***guard let portal = portal else { return ***REMOVED***
***REMOVED******REMOVED***
***REMOVED******REMOVED***do {
***REMOVED******REMOVED******REMOVED***basemapGalleryItems += try await portal.developerBasemaps.map {
***REMOVED******REMOVED******REMOVED******REMOVED***BasemapGalleryItem(basemap: $0)
***REMOVED******REMOVED***
***REMOVED*** catch {
***REMOVED******REMOVED******REMOVED***fetchBasemapsError = error
***REMOVED***
***REMOVED***
***REMOVED***
***REMOVED***func load(geoModel: GeoModel?) async {
***REMOVED******REMOVED***guard let geoModel = geoModel else { return ***REMOVED***
***REMOVED******REMOVED***
***REMOVED******REMOVED***do {
***REMOVED******REMOVED******REMOVED***try await geoModel.load()
***REMOVED******REMOVED******REMOVED***if let basemap = geoModel.basemap {
***REMOVED******REMOVED******REMOVED******REMOVED***currentBasemapGalleryItem = BasemapGalleryItem(basemap: basemap)
***REMOVED******REMOVED***
***REMOVED******REMOVED******REMOVED***else {
***REMOVED******REMOVED******REMOVED******REMOVED***currentBasemapGalleryItem = nil
***REMOVED******REMOVED***
***REMOVED*** catch { ***REMOVED***
***REMOVED***
***REMOVED***

***REMOVED***/ A value that represents a SpatialReference mismatch.
public struct SpatialReferenceMismatchError: Error {
***REMOVED******REMOVED***/ The basemap's spatial reference
***REMOVED***public let basemapSR: SpatialReference?

***REMOVED******REMOVED***/ The geomodel's spatial reference
***REMOVED***public let geoModelSR: SpatialReference?
***REMOVED***

extension SpatialReferenceMismatchError: Equatable {***REMOVED***
