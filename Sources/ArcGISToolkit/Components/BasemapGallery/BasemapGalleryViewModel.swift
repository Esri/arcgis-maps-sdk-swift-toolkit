// Copyright 2021 Esri.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftUI
import ArcGIS

/// Manages the state for a `BasemapGallery`.
@MainActor
public class BasemapGalleryViewModel: ObservableObject {
    /// Creates a `BasemapGalleryViewModel`.
    /// - Remark: If `basemapGalleryItems` is empty, ArcGISOnline's developer basemaps will
    /// be loaded and added to `basemapGalleryItems`.
    /// - Parameters:
    ///   - basemapGalleryItems: A list of pre-defined base maps to display.
    public init(_ basemapGalleryItems: [BasemapGalleryItem] = []) {
        self.basemapGalleryItems.append(contentsOf: basemapGalleryItems)
        
        if basemapGalleryItems.isEmpty {
            // We have no basemap items, so fetch the
            //developer basemaps from AGOL.
            fetchBasemapsTask = Task {
                await fetchBasemaps(
                    from: Portal.arcGISOnline(isLoginRequired: false),
                    useDeveloperBasemaps: true
                )
            }
        }
    }
    
    private var fetchBasemapsTask: Task<Void, Never>? {
        willSet {
            fetchBasemapsTask?.cancel()
        }
    }
    
    /// The error generated by fetching the `Basemaps` from the `Portal`.
    @Published
    public var fetchBasemapsError: Error? = nil
    
    /// If the `GeoModel` is not loaded when passed to the `BasemapGalleryViewModel`, then
    /// the geoModel will be immediately loaded. The spatial reference of geoModel dictates which
    /// basemaps from the gallery are enabled. When an enabled basemap is selected by the user,
    /// the geoModel will have its basemap replaced with the selected basemap.
    public var geoModel: GeoModel? {
        didSet {
            Task { await load(geoModel: geoModel) }
        }
    }
    
    /// The `Portal` object, if any. Setting the portal will automatically fetch it's basemaps
    /// and replace the`basemapGalleryItems` array items with the fetched basemaps.
    public var portal: Portal? {
        didSet {
            // Remove all items from `basemapGalleryItems`.
            basemapGalleryItems.removeAll()
            fetchBasemapsTask = Task { await fetchBasemaps(from: portal) }
        }
    }
    
    /// The list of basemaps currently visible in the gallery. It is comprised of items passed into
    /// the `BasemapGalleryItem` constructor property and items loaded either from `portal` or
    /// from ArcGISOnline if `portal` is `nil`.
    @Published
    public var basemapGalleryItems: [BasemapGalleryItem] = []
    
    /// The `BasemapGalleryItem` representing the `GeoModel`'s current base map. This may be a
    /// basemap which does not exist in the gallery.
    @Published
    public private(set) var currentBasemapGalleryItem: BasemapGalleryItem? = nil {
        didSet {
            guard let item = currentBasemapGalleryItem else { return }
            geoModel?.basemap = item.basemap
        }
    }
    
    /// The error signifying the spatial reference of the GeoModel and that of a potential
    /// current `BasemapGalleryItem` do not match.
    @Published
    public private(set) var spatialReferenceMismatchError: SpatialReferenceMismatchError? = nil
    
    /// This attempts to set `currentBasemapGalleryItem`. `currentBasemapGalleryItem`
    /// will be set if it's spatial reference matches that of the current geoModel. If the spatial references
    /// do not match, `currentBasemapGalleryItem` will be unchanged.
    /// - Parameter basemapGalleryItem: The new, potential, `BasemapGalleryItem`.
    public func updateCurrentBasemapGalleryItem(
        _ basemapGalleryItem: BasemapGalleryItem
    ) {
        Task {
            // Ensure the geoModel is loaded.
            try await geoModel?.load()
            
            // Reset the mismatch error.
            spatialReferenceMismatchError = nil
            
            // Update the basemap gallery item's `spatialReferenceStatus`.
            try await basemapGalleryItem.updateSpatialReferenceStatus(
                geoModel?.actualSpatialReference
            )
            
            // Update @State on the main thread.
            await MainActor.run {
                switch basemapGalleryItem.spatialReferenceStatus {
                case .match, .unknown:
                    currentBasemapGalleryItem = basemapGalleryItem
                case .noMatch:
                    spatialReferenceMismatchError = SpatialReferenceMismatchError(
                        basemapSR: basemapGalleryItem.spatialReference,
                        geoModelSR: geoModel?.actualSpatialReference
                    )
                }
            }
        }
    }
}

internal extension GeoModel {
    /// The actual spatial reference of the geoModel. For `Map`s, this is the map's
    /// `spatialReference`. For `Scene`s, if the `sceneViewTilingScheme` is
    /// `.webMercator`, the `actualSpatialReference` is `.webMercator`, otherwise
    /// it is the `spatialReference` of the scene.
    var actualSpatialReference: SpatialReference? {
        (self as? ArcGIS.Scene)?.sceneViewTilingScheme == .webMercator ?
        SpatialReference.webMercator :
        spatialReference
    }
}

private extension BasemapGalleryViewModel {
    /// Fetches the basemaps from the given portal and appends `basemapGalleryItems` with
    /// items created from the fetched basemaps.
    /// - Parameters:
    ///   - portal: Portal to fetch basemaps from
    ///   - useDeveloperBasemaps: If `true`, will always use the portal's developer basemaps. If
    ///   `false`, it will use either the portal's basemaps or vector basemaps, depending on the value of
    ///   `portal.portalInfo.useVectorBasemaps`.
    func fetchBasemaps(
        from portal: Portal?,
        useDeveloperBasemaps: Bool = false
    ) async {
        guard let portal = portal else { return }
        
        do {
            try await portal.load()
            
            if useDeveloperBasemaps {
                basemapGalleryItems += try await portal.developerBasemaps.map {
                    BasemapGalleryItem(basemap: $0)
                }
            } else if let portalInfo = portal.portalInfo,
                      portalInfo.useVectorBasemaps {
                basemapGalleryItems += try await portal.vectorBasemaps.map {
                    BasemapGalleryItem(basemap: $0)
                }
            } else {
                basemapGalleryItems += try await portal.basemaps.map {
                    BasemapGalleryItem(basemap: $0)
                }
            }
        } catch {
            fetchBasemapsError = error
        }
    }
    
    /// Loads the given `GeoModel` then sets `currentBasemapGalleryItem` to an item
    /// created with the geoModel's basemap.
    /// - Parameter geoModel: The `GeoModel` to load.
    func load(geoModel: GeoModel?) async {
        guard let geoModel = geoModel else { return }
        do {
            try await geoModel.load()
            if let basemap = geoModel.basemap {
                currentBasemapGalleryItem = BasemapGalleryItem(basemap: basemap)
            }
            else {
                currentBasemapGalleryItem = nil
            }
        } catch { }
    }
}

/// A value that represents an error ocurring because of a SpatialReference mismatch between
/// a geomodel and a basemap.
public struct SpatialReferenceMismatchError: Error {
    /// The basemap's spatial reference
    public let basemapSR: SpatialReference?
    
    /// The geomodel's spatial reference
    public let geoModelSR: SpatialReference?
}

extension SpatialReferenceMismatchError: Equatable {}
