@Tutorial(time: 10) {
    @Intro(title: "FeatureFormView Tutorial") {
        A `FeatureFormView` is a view that provides an easy way for developers to
        add feature attribute editing capabilities to their existing applications.
        
        @Image(source: FeatureFormView, alt: "An image of the FeatureFormView component.")
    }
    
    @Section(title: "Using the FeatureFormView") {
        @ContentAndMedia {
            @Image(source: FeatureFormView, alt: "An image of the FeatureFormView component")
        }
        
        @Steps {
            @Step {
                To begin, we initialize a map containing a feature form definition.
                
                We place a `MapView` nested within a `MapViewReader` and `NavigationStack`.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep1)
            }
            
            @Step {
                Create a model class.
                
                Add an instance of the model to the view. Within the model, define a `State` enumeration. Each enumerated value represents a step in the form editing workflow.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep2)
            }
            
            @Step {
                Add a `featureLayer` property to the `FeatureForm`.
                
                This small extension will help in multiple places in the upcoming steps.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep3)
            }
            
            @Step {
                Add a `state` property to the model.
                
                When the state switches between editing and not editing, we select and deselect the corresponding feature in the map.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep4)
            }
            
            @Step {
                Create a group of helper properties.
                
                These properties (`alertIsPresented`, `cancelConfirmationIsPresented`, `featureForm`, `formControlsAreDisabled`, `formIsPresented`, `textForState`) allow for easy use of the enumerated state values within the view.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep5)
            }
            
            @Step {
                Add a `discardEdits` and `submitChanges` method to the model.
                
                These methods will be used in buttons added later to the view.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep6)
            }
            
            @Step {
                When a form is submitted, there are a few necessary steps.
                
                First, check for any validation errors on the form.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep7)
            }
            
            @Step {
                After checking for validation errors, update the table with the edited feature.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep8)
            }
            
            @Step {
                When edits are applied to the database, some errors may be returned.
                
                Add a method `checkFeatureEditResults` to iterate through feature edit results, checking for the existence of any errors.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep9)
            }
            
            @Step {
                After the table has been updated, apply edits to the database.
                
                Use the method `checkFeatureEditResults` from the previous step to check for errors.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep10)
            }
            
            @Step {
                With the model complete, the view code can be completed.
                
                Add a method `identifyFeature` to extract a feature from the location selected on the map. The `identifyScreenPoint` property on the view will track the last selected location.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep11)
            }
            
            @Step {
                Use the `onSingleTapGesture` modifier to detect selections in the map.
                
                If the current model state is `idle`, use `identifyFeature` to produce the selected feature and instantiate a feature form.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep12)
            }
            
            @Step {
                Add the feature form view to the hierarchy.
                
                Present the feature form view using a floating panel, sheet, or other container view.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep13)
            }
            
            @Step {
                Add the `validationErrors` modifier to the feature form view.
                
                Add a `validationErrorVisibility` property of type ``FeatureFormView/ValidationErrorVisibility`` to the view. When the form is closed, reset it to ``FeatureFormView/ValidationErrorVisibility/automatic``.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep14)
            }
            
            @Step {
                Support canceling and closing the form.
                
                Add an alert to confirm cancellation. Add a "Cancel" button to the toolbar to set the model's state to cancellation pending. 
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep15)
            }
            
            @Step {
                Add a second button ("Submit") to the toolbar. 
                
                When this button is pressed, set `validationErrorVisibility` to ``FeatureFormView/ValidationErrorVisibility/visible``. This will cause any fields that never received focus but are considered invalid to show errors. This button should also call `submitChanges` on the model.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep16)
            }
            
            @Step {
                Add a second alert to indicate any errors.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep17)
            }
            
            @Step {
                Add an overlay to display the current state to the user.
                
                Some operations, like applying edits to the database, can take an extended period of time. To keep users informed, indicate the current state of the model to them.
                @Code(name: "FeatureFormExampleView.swift", file: FeatureFormViewStep18)
            }
        }
    }
}
